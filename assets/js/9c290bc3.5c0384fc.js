"use strict";(self.webpackChunk_sensejs_sensejs_doc=self.webpackChunk_sensejs_sensejs_doc||[]).push([[847],{8441:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var t=o(5250),i=o(9074);const s={id:"method-invoking",sidebar_position:3},r="Method Invoker",d={id:"injection/method-invoking",title:"Method Invoker",description:"Except for start up, almost all dependency injections is triggered by the method invoker, especially for daemon",source:"@site/docs/injection/method-invoker.md",sourceDirName:"injection",slug:"/injection/method-invoking",permalink:"/docs/injection/method-invoking",draft:!1,unlisted:!1,editUrl:"https://github.com/sensejs/sensejs/edit/master/website/docs/injection/method-invoker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"method-invoking",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Injection Scope",permalink:"/docs/injection/injection-scope"},next:{title:"Module",permalink:"/docs/module/"}},l={},a=[{value:"Example",id:"example",level:2},{value:"Explanation",id:"explanation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"method-invoker",children:"Method Invoker"}),"\n",(0,t.jsx)(n.p,{children:"Except for start up, almost all dependency injections is triggered by the method invoker, especially for daemon\napplications."}),"\n",(0,t.jsx)(n.p,{children:"As mentioned before, the method invoker is the core of SenseJS framework, functionalities in SenseJS including\nbut not limited to HTTP-support are based on it."}),"\n",(0,t.jsx)(n.p,{children:"This article will guide you on how to use the method invoker."}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"The following example shows how to invoke a method of a component with the help of the method invoker."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const symbol1 = Symbol();\nconst symbol2 = Symbol();\n\n@Component()\nclass TargetComponent {\n  targetMethod(\n    @Inject('foobar') foobar: string, // will get 'FOOBAR' from FooMiddleware\n    @Inject(symbol1) foo: string,     // will get 'FOO' from the first argument of `invoke`\n    @Inject(symbol2) bar: string,     // will get 'BAR' from the second argument of `invoke`\n  ) {\n    console.log(foo, bar, foobar);\n  }\n}\n\n@Middleware({\n  provides: ['foobar']\n})\nclass FooMidlleware {\n  constructor(@Inject(symbol1) private foo: string, @Inject(symbol2) private bar: string) {\n\n  }\n\n  async handle(next: (foo: string) => Promise<void>) {\n    await next(this.foo + this.bar);\n  }\n}\n\n@EntryPoint()\n@Module({\n  components: [TargetComponent]\n})\nclass MyModule {\n\n  timer?: NodeJS.Timer;\n\n  @OnModuleStart()\n  onModuleStart(@Inject(Container) container: Container) {\n\n    this.timer = setInterval(() => {\n\n      container.createMethodInvoker(\n        TagetComponent,\n        'targetMethod',\n        [FooMidlleware], // The middlewares that configured for this invokation\n        symbol1, // the injectable id for the first argument of `invoke`\n        symbol2, // the injectable id for the second argument of `invoke`\n      ).invoke(\n        'FOO', // will bound to `symbol1`\n        'BAR', // will bound to `symbol2`\n      );\n    }, 1000);\n  }\n\n  @OnModuleStop()\n  onModuleStop() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n}\n\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(n.p,{children:["In the example code, we define a module ",(0,t.jsx)(n.code,{children:"MyModule"})," with a component ",(0,t.jsx)(n.code,{children:"TargetComponent"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"OnModuleStart"})," hook of ",(0,t.jsx)(n.code,{children:"MyModule"}),", we create a timer that periodically invoke the method ",(0,t.jsx)(n.code,{children:"targetMethod"})," of\n",(0,t.jsx)(n.code,{children:"TargetComponent"})," with the help of the method invoker, with additional injectables supplied:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Injectables bound to ",(0,t.jsx)(n.code,{children:'"foobar"'})," is supplied by the middleware ",(0,t.jsx)(n.code,{children:"FooMiddleware"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Injectables bound ",(0,t.jsx)(n.code,{children:"symbol1"})," and ",(0,t.jsx)(n.code,{children:"symbol2"})," are supplied through the parameter of ",(0,t.jsx)(n.code,{children:"invoke"})," method"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note that these injectables are not defined elsewhere in this example, they are only available during the invocation\nsession."}),"\n",(0,t.jsx)(n.p,{children:"Even if any of them is defined elsewhere, the supplied value will override the defined one."}),"\n",(0,t.jsxs)(n.p,{children:["Also note that ",(0,t.jsx)(n.code,{children:"this.container.createMethodInvoker().invoke()"})," initiates a new session of dependency injection, which\nmeans that injectables within ",(0,t.jsx)(n.code,{children:"Scope.SESSION"}),", will be instantiated for each invocation."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},9074:(e,n,o)=>{o.d(n,{Z:()=>d,a:()=>r});var t=o(79);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);